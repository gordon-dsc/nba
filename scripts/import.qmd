---
title: "Data Import Script"
author: Zeke Hall and Ethan Keyes
format: html
---

# Import

## Packages Install

```{r packages}
install.packages("tidyverse")
install.packages("httr2")
install.packages("rvest")
library(tidyverse)
library(httr2)
library(rvest)
```

## Web Scrapping

The first step in our data import was to scrap the names of all the NBA all stars and the games they had played in. This was done using [this](https://www.basketball-reference.com/allstar/NBA_2020.html) webpage. The site holding the data only showed one game on a page so we created a function to scraped and slightly clean each page by passing in the year of the game. We then used that function to iterate through the years 1980 to 2020 (excluding 1999 as there was no all star game that year). The data frames were then combined into one large frame.

```{r function to scrape by year of all star game}
data_func <- function(year){
url <-"https://www.basketball-reference.com/allstar/NBA_" #base URL for the website
url_ending <- paste(as.character(year), ".html", sep = "") #add the target year
url_final <- paste(url, url_ending, sep = "") #create the full url to scrape from

#scrapes the target data
read_html(url_final) |>
  html_elements(".left") |>
  html_element("a") |>
  html_text2() -> nba_all_star

#small amount of data cleaning and rectangling 
nba_all_star |>
  tibble() |>
  drop_na() |>
  mutate(new_column = rep(c("player", "team"), length.out = n())) |>
  pivot_wider(names_from = new_column,
              values_from = nba_all_star) |>
  unnest_longer(col = 1:2) |>
  separate_wider_delim(cols = player,
                       delim = " ",
                       names = c("first", "last"),
                       too_many = "merge") |>
  mutate(year = as.numeric(year-1)) -> 
  #the -1 here is becasue the x year game was played in the x-1 to x season 
  all_star_clean
}
```

```{r create data frame}
#example of how to use scraping functions 

example_scrap <- data_func(1980)  #create and frame to build on using first year
for (i in 1981:1998) { #for ever year from 1981 to 1998 add the information to the data frame
  temp <- data_func(i)
  example_scrap <- bind_rows(example_scrap, temp)
}
for (i in 2000:2020) { #for every year from 2000 to 2020 add information to data frame
  temp <- data_func(i)
  example_scrap <- bind_rows(example_scrap, temp)
}
```

\

## API Data

During our data import the names of NBA all star players from 1980 to 2020 were pulled using web scrapping. We then used the balldontlie function to import the season average data for the players in a given year from that list.

## Functions for API

We wrote several functions to make accessing the api data slightly easier before applying it to our list of names. The API identifies players by a id number, the first function searches for that ID number. There are a couple player that the API had multiple ID numbers for, we search through the data base to find the right ones and if statements control for these cases. The second function takes the ID number and a give season and returns the average stats that player had in the given season. The third function combines the first two for simplicity when applying it to the list, it takes the first and last name of the player in a season and returns the season averages.

```{r function 1}
get_id_number <- function(first, last){
  if(first == "Bobby" && last == "Jones"){
    id_num <- 2277
  } else if(first == "Patrick" && last == "Ewing"){
    id_num <- 2964
  } else if (first == "Steve" && last == "Smith") {
    id_num <- 675
  } else if (first == "Metta" && last == "World Peace"){
    id_num <- 1249
  } else {
  url <- "https://www.balldontlie.io/api/v1"  #base api url
  request(url)|>                              
    req_url_path_append("/players") |>       #api endpoint
    req_url_query(per_page = 100,
                  search = last) |>
    req_perform()|>
    resp_body_json() ->
    all_player_ids
  
  #unnest and rectangling the player ID's
  all_player_ids <- all_player_ids[1]
  all_player_id_tibble <- tibble(all_player_ids)
  
  all_player_id_tibble |>
    unnest_longer(col = all_player_ids) |>
    hoist(all_player_ids,
          id = c("id"),
          first_name = c("first_name"),
          last_name = c("last_name")) ->
    all_player_id_tibble
  
  #filter for first and last name matches
  all_player_id_tibble |>
    filter(first_name == first) |>
    filter(last_name == last) ->
    all_player_id_tibble
  
  id_num <- all_player_id_tibble$id[1] #returns the id number of the player in the api 
  }
  id_num
}

```

```{r function 2}
#function to get season averages from player id
get_stats <- function(season, id){
  #query parameters seem to not work for the api, the following directly constructs to url 
  url <- "https://www.balldontlie.io/api/v1"
  append_string <- "/season_averages?"
  append_string_ids <- paste("player_ids[]=", as.character(id),sep = "")
  append_string_season <- paste("&season=", as.character(season), sep = "")
  append_string <- paste(append_string,append_string_ids, append_string_season,sep = "")
  
  request(url) |>
    req_url_path_append(append_string) |>
    req_perform() |>
    resp_body_json() ->
    stats_json
  
  #rectangle the data
  stats_json <- stats_json[["data"]]
  stats_tibble <- tibble(stats_json) 
  stats_tibble|>
    unnest_wider(col = stats_json) ->
    stats_tibble #return the stats for the player in the year
}
```

```{r function 3}
#combines the first two functions to streamline the process
get_season_avg <- function(first, last, season){
  id <- get_id_number(first, last)
  get_stats(season, id) ->
  stats_tibble
}
```

## Examples of API use on test data frame

Created a simple Data Frame object with player names to test functionality

```{r}
#create a data frame for testing
names <- list(lebron = c("LeBron","James"),
              davis = c("Anthony", "Davis"))
names <- tibble(names)
names|>
  unnest_wider(names, names_sep = "")->
  names

#test function within a mutate call
names|>
  mutate(stats = map2(.x = names1,
                      .y = names2,
                      .f = \(x,y) {get_season_avg(x,y,2020)})) |>
  unnest_wider(stats) ->
  names_stats
```

## Data import using scrape and API

Data import by using scrape function by year to get names and year into frame before using api function to get stats data. Some names are scrapped in a way that is difficult for API to find so they are changed with case_when clauses.

Initial year is done than iterate through the rest (skipping 1999 as there was no game) and adding information to data frame as it is imported. Some names are not able to be read by the API due to added accent marks and those are reformatted before being passed in. The API has a relatively low rate limit (about 30 a minute) so the script is set up to pause for 60 seconds between in iteration.

```{r}
initial <- data_func(1981) #create and frame to build on using first year
initial |>
  #handle some irregular names
  mutate(last = case_when(last == "B. Free" ~ "Free",
                           TRUE ~ last),
         first = case_when(first == "Tiny" ~ "Nate",
                           TRUE ~ first),
         #take players and seasons to get stats data
         stats = map2(.x = as.character(first),
                      .y = as.character(last),
                      .f = \(x,y) {get_season_avg(x,y,1980)},
                      .progress = TRUE)) |>
  unnest_wider(stats) -> #rectangle the stats data
  initial
Sys.sleep(60) #pause to not hit API rate limit
for (i in 1982:2023) { #for ever year from 1981 to 2020 excluding 1999 add the information to the data frame
  if (i == 1999) {
    Sys.sleep(60)
    next 
  }
    temp <- data_func(i)
    temp |>
    #handle some irregular names
    mutate(first = case_when(first == "Tiny" ~ "Nate",
                             first == "Fat" ~ "Lafayette",
                             TRUE ~ first),
           last = case_when(last == "Barry Carroll"~ "Barry,Carroll",
                            last == "Stojaković" ~ "Stojakovic",
                            last == "Dragić" ~ "Dragic",
                            last == "Dončić" ~ "Doncic",
                            last == "Jokić" ~ "Jokic",
                            last == "Ginóbili" ~ "Ginobili",
                            last == "Vučević" ~ "Vucevic",
                            TRUE ~ last)) ->
    temp
    temp |>
    #take players and seasons to get stats data
    mutate(stats = map2(.x = as.character(temp$first),
                        .y = as.character(temp$last),
                        .f = \(x,y) {get_season_avg(x,y,(i-1))},
                        .progress = TRUE))|>
    unnest_wider(stats) -> #rectangle the stats data
    temp
    initial <- bind_rows(initial, temp) #combine new year data with existing frame
    Sys.sleep(60) #wait to not hit API rate limit
}

#magic johnson 1991 was voted to all star even though he was out for the season

```

```{r}
# write the data frame to a csv file in the correct directory
write_csv(initial,
          file = "../data/imported_data/nba_all_stars.csv")
```
